%tm = satdata.D;
time = tm*24*3600;
time_0 = time-time(1);

dist_ECI=sqrt(satdata.ECI_Xkm.^2+satdata.ECI_Ykm.^2+satdata.ECI_Zkm.^2); % distance of sat from center of earth

    
if satdata.ECI_Xkm(1)>0  
    if satdata.ECI_Ykm(1)>0
        if satdata.ECI_Zkm(1)>0
            phi(1)=acos(sqrt(satdata.ECI_Xkm(1).^2+satdata.ECI_Ykm(1).^2)./dist_ECI(1));
            lambda(1)=acos(satdata.ECI_Xkm(1)./sqrt(satdata.ECI_Xkm(1).^2+satdata.ECI_Ykm(1).^2));
        else
            phi(1)=-acos(sqrt(satdata.ECI_Xkm(1).^2+satdata.ECI_Ykm(1).^2)./dist_ECI(1));
            lambda(1)=acos(satdata.ECI_Xkm(1)./sqrt(satdata.ECI_Xkm(1).^2+satdata.ECI_Ykm(1).^2));
        end
    else
        if satdata.ECI_Zkm(1)>0
            phi(1)=acos(sqrt(satdata.ECI_Xkm(1).^2+satdata.ECI_Ykm(1).^2)./dist_ECI(1));
            lambda(1)=2*pi-acos(satdata.ECI_Xkm(1)./sqrt(satdata.ECI_Xkm(1).^2+satdata.ECI_Ykm(1).^2));            
        else
            phi(1)=-acos(sqrt(satdata.ECI_Xkm(1).^2+satdata.ECI_Ykm(1).^2)./dist_ECI(1));
            lambda(1)=2*pi-acos(satdata.ECI_Xkm(1)./sqrt(satdata.ECI_Xkm(1).^2+satdata.ECI_Ykm(1).^2));       
        end
    end
else
    if satdata.ECI_Ykm(1)>0
        if satdata.ECI_Zkm(1)>0
            phi(1)=acos(sqrt(satdata.ECI_Xkm(1).^2+satdata.ECI_Ykm(1).^2)./dist_ECI(1));
            lambda(1)=acos(satdata.ECI_Xkm(1)./sqrt(satdata.ECI_Xkm(1).^2+satdata.ECI_Ykm(1).^2));
        else
            phi(1)=-acos(sqrt(satdata.ECI_Xkm(1).^2+satdata.ECI_Ykm(1).^2)./dist_ECI(1));
            lambda(1)=acos(satdata.ECI_Xkm(1)./sqrt(satdata.ECI_Xkm(1).^2+satdata.ECI_Ykm(1).^2));
        end
    else
        if satdata.ECI_Zkm(1)>0
            phi(1)=acos(sqrt(satdata.ECI_Xkm(1).^2+satdata.ECI_Ykm(1).^2)./dist_ECI(1));
            lambda(1)=2*pi-acos(satdata.ECI_Xkm(1)./sqrt(satdata.ECI_Xkm(1).^2+satdata.ECI_Ykm(1).^2)); 
        else
            phi(1)=-acos(sqrt(satdata.ECI_Xkm(1).^2+satdata.ECI_Ykm(1).^2)./dist_ECI(1));
            lambda(1)=2*pi-acos(satdata.ECI_Xkm(1)./sqrt(satdata.ECI_Xkm(1).^2+satdata.ECI_Ykm(1).^2)); 
        end
    end
end



M=[cos(phi(1))*cos(lambda(1)) -dist_ECI(1)*sin(phi(1))*cos(lambda(1)) -dist_ECI(1)*cos(phi(1))*sin(lambda(1));cos(phi(1))*sin(lambda(1)) -dist_ECI(1)*sin(phi(1))*sin(lambda(1)) dist_ECI(1)*cos(phi(1))*cos(lambda(1));sin(phi(1)) dist_ECI(1)*cos(phi(1)) 0];
dot=inv(M)*[satdata.ECI_V_Xkms(1);satdata.ECI_V_Ykms(1);satdata.ECI_V_Zkms(1)];%M*(r',phi',lambda')=(x',y',z')
x0=[dist_ECI(1) dot(1) phi(1) dot(2) lambda(1) dot(3)]; % initial value, dot(1):r', dot(2):phi', dot(3):lambda'

[t,x]=ode45('dif',time,x0); % ode45 function
x1=x(:,1); % 계산된 r
x2=x(:,2); % 계산된 r'
x3=x(:,3); % 계산된 phi
x4=x(:,4); % 계산된 phi'
x5=x(:,5); % 계산된 lambda
x6=x(:,6); % 계산된 lambda'

x_regen=x1.*cos(x3).*cos(x5); % r,phi,lambda->xyz
y_regen=x1.*cos(x3).*sin(x5);
z_regen=x1.*sin(x3);
vx_regen=cos(x3).*cos(x5).*x2-x1.*sin(x3).*cos(x5).*x4-x1.*cos(x3).*sin(x5).*x6;
vy_regen=cos(x3).*sin(x5).*x2-x1.*sin(x3).*sin(x5).*x4+x1.*cos(x3).*cos(x5).*x6;
vz_regen=sin(x3).*x2+x1.*cos(x3).*x4;

DervData(:,1) = time; 
DervData(:,2) = x_regen;
DervData(:,3) = y_regen;
DervData(:,4) = z_regen;
DervData(:,5) = vx_regen;
DervData(:,6) = vy_regen;
DervData(:,7) = vz_regen;
eci_data(:,1) = satdata.ECI_Xkm;
eci_data(:,2) = satdata.ECI_Ykm;
eci_data(:,3) = satdata.ECI_Zkm;
eci_data(:,4) = satdata.ECI_V_Xkms;
eci_data(:,5) = satdata.ECI_V_Ykms;
eci_data(:,6) = satdata.ECI_V_Zkms;
error = zeros(601,6);
error(:,1:3) = DervData(:,2:4) - eci_data(:,1:3);
error(:,4:6) = DervData(:,5:7) - eci_data(:,4:6);


file = fopen('Regenerated by derivative eq.txt','w');
fprintf(file, '%g %g %g %g \n', DervData'); % Save new data as text file
fclose(file);

figure
h = plot3(satdata.ECI_Xkm,satdata.ECI_Ykm,satdata.ECI_Zkm,'k', x_regen,y_regen,z_regen,'r')
hold on;
grid on
title('SNUGLITE Orbit Visualization, April 11, 2019');
xlabel('X_{ECI} [km]');
ylabel('Y_{ECI} [km]');
zlabel('Z_{ECI} [km]');
axis equal;
[ex, ey, ez] = sphere;
ex = ex * 6371; ey = ey * 6371; ez = ez * 6371;
sh = surf(ex, ey, ez);
sh.FaceColor = [1, 1, 1];
sh.EdgeColor = [0.8, 0.8, 0.8];
hold off;
legend(h, 'Measurement', 'Regenerated (dif-eq)')

figure
subplot(3,2,1)
plot(time,satdata.ECI_Xkm,'r',time,x_regen,'b')
grid on
title('X-position vs. Time');
legend('Original','Regeneration');
xlabel('Time(sec)'),ylabel('Position(km)');
subplot(3,2,3)
plot(time,satdata.ECI_Ykm,'r',time,y_regen,'b')
grid on
title('Y-position vs. Time');
legend('Original','Regeneration');
xlabel('Time(sec)'),ylabel('Position(km)');
subplot(3,2,5)
plot(time,satdata.ECI_Zkm,'r',time,z_regen,'b')
grid on
title('Z-position vs. Time');
legend('Original','Regeneration');
xlabel('Time(sec)'),ylabel('Position(km)');
subplot(3,2,2)
plot(time,satdata.ECI_V_Xkms,'r',time,vx_regen,'b')
grid on
title('X-velocity vs. Time');
legend('Original','Regeneration');
xlabel('Time(sec)'),ylabel('Velocity(km/s)');
subplot(3,2,4)
plot(time,satdata.ECI_V_Ykms,'r',time,vy_regen,'b')
grid on
title('Y-velocity vs. Time');
legend('Original','Regeneration');
xlabel('Time(sec)'),ylabel('Velocity(km/s)');
subplot(3,2,6)
plot(time,satdata.ECI_V_Zkms,'r',time,vz_regen,'b')
grid on
title('Z-velocity vs. Time');
legend('Original','Regeneration');
xlabel('Time(sec)'),ylabel('Velocity(km/s)');

figure
subplot(3,2,1)
plot(time,error(:,1), 'k')
grid on
title('x Error vs time');
xlabel('Time(sec)'),ylabel('Position(km)');
subplot(3,2,3)
plot(time,error(:,2), 'k')
grid on
title('y Error vs time');
xlabel('Time(sec)'),ylabel('Position(km)');
subplot(3,2,5)
plot(time,error(:,3), 'k')
grid on
title('z Error vs time');
xlabel('Time(sec)'),ylabel('Position(km)');
subplot(3,2,2)
plot(time,error(:,4), 'k')
grid on
title('vx Error vs time');
xlabel('Time(sec)'),ylabel('Velocity(km/s)');
subplot(3,2,4)
plot(time,error(:,5), 'k')
grid on
title('vy Error vs time');
xlabel('Time(sec)'),ylabel('Velocity(km/s)');
subplot(3,2,6)
plot(time,error(:,6), 'k')
grid on
title('vz Error vs time');
xlabel('Time(sec)'),ylabel('Velocity(km/s)');